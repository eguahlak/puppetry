var _user$project$Puppetry$pixelStringOf = function (message) {
	var _p0 = message;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(_p0._1.index),
		A2(_elm_lang$core$Basics_ops['++'], '] in ', _p0._0.name));
};
var _user$project$Puppetry$updatedPixel = F2(
	function (pixel, p) {
		return _elm_lang$core$Native_Utils.eq(p.index, pixel.index) ? pixel : p;
	});
var _user$project$Puppetry$updatedStrip = F2(
	function (pixel, s) {
		return _elm_lang$core$Native_Utils.update(
			s,
			{
				pixels: A2(
					_elm_lang$core$List$map,
					_user$project$Puppetry$updatedPixel(pixel),
					s.pixels)
			});
	});
var _user$project$Puppetry$update = F2(
	function (message, puppetry) {
		var _p1 = message;
		var _p3 = _p1._1;
		var _p2 = _p1._0.name;
		switch (_p2) {
			case 'Bagscene':
				return _elm_lang$core$Native_Utils.update(
					puppetry,
					{
						back: A2(
							_user$project$Puppetry$updatedStrip,
							_elm_lang$core$Native_Utils.update(
								_p3,
								{color: puppetry.color}),
							puppetry.back)
					});
			case 'Mellemscene':
				return _elm_lang$core$Native_Utils.update(
					puppetry,
					{
						middle: A2(
							_user$project$Puppetry$updatedStrip,
							_elm_lang$core$Native_Utils.update(
								_p3,
								{color: puppetry.color}),
							puppetry.middle)
					});
			case 'Forscene':
				return _elm_lang$core$Native_Utils.update(
					puppetry,
					{
						front: A2(
							_user$project$Puppetry$updatedStrip,
							_elm_lang$core$Native_Utils.update(
								_p3,
								{color: puppetry.color}),
							puppetry.front)
					});
			case 'Sidelys':
				return _elm_lang$core$Native_Utils.update(
					puppetry,
					{
						side: A2(
							_user$project$Puppetry$updatedStrip,
							_elm_lang$core$Native_Utils.update(
								_p3,
								{color: puppetry.color}),
							puppetry.side)
					});
			case 'Proscenie':
				return _elm_lang$core$Native_Utils.update(
					puppetry,
					{
						proscenium: A2(
							_user$project$Puppetry$updatedStrip,
							_elm_lang$core$Native_Utils.update(
								_p3,
								{color: puppetry.color}),
							puppetry.proscenium)
					});
			default:
				return puppetry;
		}
	});
var _user$project$Puppetry$Pixel = F2(
	function (a, b) {
		return {color: a, index: b};
	});
var _user$project$Puppetry$Strip = F3(
	function (a, b, c) {
		return {pixelCount: a, name: b, pixels: c};
	});
var _user$project$Puppetry$strip = F2(
	function (pixelCount, name) {
		return A3(
			_user$project$Puppetry$Strip,
			pixelCount,
			name,
			A2(
				_elm_lang$core$List$map,
				function (i) {
					return A2(_user$project$Puppetry$Pixel, '#ff00cc', i);
				},
				A2(_elm_lang$core$List$range, 0, pixelCount - 1)));
	});
var _user$project$Puppetry$Puppetry = F6(
	function (a, b, c, d, e, f) {
		return {back: a, middle: b, front: c, side: d, proscenium: e, color: f};
	});
var _user$project$Puppetry$puppetry = A6(
	_user$project$Puppetry$Puppetry,
	A2(_user$project$Puppetry$strip, 27, 'Bagscene'),
	A2(_user$project$Puppetry$strip, 27, 'Mellemscene'),
	A2(_user$project$Puppetry$strip, 27, 'Forscene'),
	A2(_user$project$Puppetry$strip, 12, 'Sidelys'),
	A2(_user$project$Puppetry$strip, 23, 'Proscenie'),
	'#ffffff');
var _user$project$Puppetry$PixelSelected = F2(
	function (a, b) {
		return {ctor: 'PixelSelected', _0: a, _1: b};
	});
var _user$project$Puppetry$graphicsForPixel = F2(
	function (strip, pixel) {
		var x = _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], pixel.index, 2),
			1) ? (206 + (6 * pixel.index)) : (200 - (6 * pixel.index));
		return A2(
			_elm_lang$svg$Svg$circle,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Events$onMouseOver(
					A2(_user$project$Puppetry$PixelSelected, strip, pixel)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$cx(
						_elm_lang$core$Basics$toString(x)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cy('10'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$r('4'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill(pixel.color),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$Puppetry$graphicsForStrip = F2(
	function (strip, pos) {
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$y(pos),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width('400'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height('20'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(6 * (32 - strip.pixelCount))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width(
								_elm_lang$core$Basics$toString((12 * strip.pixelCount) + 12)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('20'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: A2(
					_elm_lang$core$List$map,
					_user$project$Puppetry$graphicsForPixel(strip),
					strip.pixels)
			});
	});
var _user$project$Puppetry$view = function (puppetry) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width('400'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height('200'),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(_user$project$Puppetry$graphicsForStrip, puppetry.back, '0'),
			_1: {
				ctor: '::',
				_0: A2(_user$project$Puppetry$graphicsForStrip, puppetry.middle, '30'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Puppetry$graphicsForStrip, puppetry.front, '60'),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Puppetry$graphicsForStrip, puppetry.proscenium, '120'),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
